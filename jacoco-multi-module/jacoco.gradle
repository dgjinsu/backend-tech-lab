subprojects {
    apply plugin: 'jacoco'

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport' // 테스트 후 JaCoCo 실행
    }

    tasks.named('jacocoTestReport') {
        dependsOn test

        reports {
            xml.required = false
            csv.required = true
            html.required = true
        }

        executionData.from = fileTree(dir: "$buildDir/jacoco", includes: ["*.exec"])

        classDirectories.setFrom(
                files(sourceSets.main.output)
                        .filter { it.exists() }
                        .asFileTree.matching(excludePatternRules())
        )
    }
}

def excludePatternRules() {
    return {
        exclude "**/dto/**"      // DTO 패키지 제외
        exclude "**/Q*.class"    // QueryDSL Q-Class 제외
    }
}

task testCodeCoverageReport(type: JacocoReport) {

    // service 하위 모듈들에 대해서만
    def microserviceModules = subprojects.findAll { it.path.startsWith(":service:") }

    // 테스트 끝난 후 실행
    dependsOn microserviceModules.test

    // test.exec 가져오기
    executionData.from = files(microserviceModules.jacocoTestReport.executionData)

    // 클래스 파일 가져오기
    additionalClassDirs.setFrom(
            files(microserviceModules*.sourceSets.main.output)
                    .filter { it.exists() }
                    .asFileTree.matching(excludePatternRules())
    )

    // 소스 코드 가져오기
    sourceDirectories.setFrom(
            files(microserviceModules*.sourceSets.main.allSource.srcDirs)
                    .filter { it.exists() }
                    .asFileTree.matching(excludePatternRules())
    )

    reports {
        xml.required = false
        csv.required = true
        html.required = true
    }
}
