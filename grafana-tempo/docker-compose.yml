version: "3.8"

networks:
  monitoring:
    external: true  # 이미 생성된 네트워크를 사용하도록 설정

services:
  server1:
    build: ./server1
    container_name: server1
    environment:
      OTEL_SERVICE_NAME: "server1"
      OTEL_TRACES_EXPORTER: "jaeger, zipkin, otlp"
      OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger:14250"
      OTEL_EXPORTER_ZIPKIN_ENDPOINT: "http://zipkin:9411/api/v2/spans"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://tempo:4317"
      OTEL_METRICS_EXPORTER: "prometheus"
      OTEL_EXPORTER_PROMETHEUS_HOST: "0.0.0.0"
      OTEL_EXPORTER_PROMETHEUS_PORT: "9464"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "http://collector:4317"
    ports:
      - "8080:8080"
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one
      - collector
      - tempo
      - rabbitmq
    networks:
      - monitoring  # 네트워크 추가

  server2:
    build: ./server2
    container_name: server2
    environment:
      OTEL_SERVICE_NAME: "server2"
      OTEL_TRACES_EXPORTER: "jaeger, zipkin, otlp"
      OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger:14250"
      OTEL_EXPORTER_ZIPKIN_ENDPOINT: "http://zipkin:9411/api/v2/spans"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://tempo:4317"
      OTEL_METRICS_EXPORTER: "prometheus"
      OTEL_EXPORTER_PROMETHEUS_HOST: "0.0.0.0"
      OTEL_EXPORTER_PROMETHEUS_PORT: "9464"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "http://collector:4317"
    ports:
      - "8081:8081"
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one
      - collector
      - tempo
      - rabbitmq
    networks:
      - monitoring  # 네트워크 추가

  jaeger-all-in-one:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: always
    ports:
      - "16686:16686"
      - "14250"
    networks:
      - monitoring

  zipkin-all-in-one:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
    networks:
      - monitoring

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage # exemplar 활성화
      - --web.enable-remote-write-receiver  # Remote Write 활성화 (추가) | tempo 에서 graph 그리기 위함
    restart: always
    ports:
      - "9090:9090"
    depends_on:
      - server1
    networks:
      - monitoring

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.91.0
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    restart: always
    ports:
      - "4317"
    depends_on:
      - loki
    networks:
      - monitoring

  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    ports:
      - "3100"
    networks:
      - monitoring

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    restart: always
    ports:
      - "4317"
      - "3200"
    networks:
      - monitoring

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - monitoring

